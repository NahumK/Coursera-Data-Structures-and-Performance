

How do Java programs deal with vast quantities of data? Many of the data structures and algorithms that work with introductory toy examples break when applications process real, large data sets.  Efficiency is critical, but how do we achieve it, and how do we even measure it?

In this course, you will use and analyze data structures that are used in industry-level applications, such as linked lists, trees, and hashtables.  You will explain how these data structures make programs more efficient and flexible.  You will apply asymptotic Big-O analysis to describe the performance of algorithms and evaluate which strategy to use for efficient data retrieval, addition of new data, deletion of elements, and/or memory usage.

The program you will build throughout this course allows its user to manage, manipulate and reason about large sets of textual data.    



/-------------------------------------------------------------------------
/ Starter Code and GUI Application for Course 2 in the
/ Java Programming: Object Oriented Design of 
/ Data Structures Specialization:
/
/ Data structures: Measuring and Optimizing Performance
/ https://www.coursera.org/learn/data-structures-optimizing-performance
/
/ Authored by UCSD MOOC Team:
/ Mia Minnes, Christine Alvarado, Leo Porter, Alec Brickman
/ and Adam Setters
/
/ Date: 10/29/2015
/-------------------------------------------------------------------------

---------------------------------------------------------[ DESCRIPTION ]--

The files provided are skeleton code, as well as grading previews and 
testing files to be used in completing the course programming 
assignments. Additionally, you are provided a runnable JavaFX program 
which will help to test and demonstrate your implementations.

-------------------------------------------------------[ FILES BY WEEK ]--

Below are the files introduced in each week and used in each week
of the course. See file for description...

Week 1 : Introduction and Working with Strings
==============================================
document.Document.java
document.BasicDocument.java

Week 2 : Efficiency Analysis and Benchmarking
=============================================
document.EfficientDocument.java

Week 3 : Interfaces, Linked Lists vs. Arrays, and Correctness
=============================================================
textgen.MyLinkedList*.java
textgen.MarkovTextGenerator.java
textgen.MarkovTextGenerator*.java

Week 4 : Trees! (including Binary Search Trees and Tries)
=========================================================
spelling.SpellingSuggest.java
spelling.AutoComplete.java
spelling.Dictionary.java
spelling.Dictionary*.java
spelling.AutoCompleteDictionaryTrie.java
spelling.TrieNode.java

Week 5 : Hash Maps and Edit Distance
====================================
spelling.WordPath.java
spelling.NearbyWords.java
spelling.WPTree.java

---------------------------------------------------------------[ SETUP ]-- 

Importing Project into eclipse:
	1. Create a new Java Project in your workspace
	2. Import the starter files:
	  File -> Import -> Select "File System" -> Next -> Browse and set 
	  root directory to folder contents of zip were extracted to -> Finish

Feel free to use another IDE or manually compile and run your programs.
If you need help, google is your friend.

-----------------------------------------------------[ ACKNOWLEDGEMENTS]--

A big thank you to Tomas Mikula for creating RichTextFX 
which was used as the text area in the GUI application.
(Link: https://github.com/TomasMikula/RichTextFX)


